import Fastify from 'fastify'
import cors from '@fastify/cors'
import cookie from '@fastify/cookie'
import { PrismaClient } from '@prisma/client'
import jwt from 'jsonwebtoken'
import bcrypt from 'bcryptjs'

const app = Fastify({ logger: true })
const prisma = new PrismaClient()
const JWT_SECRET = process.env.JWT_SECRET || 'dev_secret_change_me'

app.register(cors, {
  origin: (origin, cb) => cb(null, true),
  credentials: true,
})
app.register(cookie, { secret: process.env.COOKIE_SECRET || 'dev_cookie' })

app.get('/api/health', async () => ({ ok: true }))

// Minimal AI endpoint to support proxy from Next API
app.post('/api/generate', async (req: any) => {
  const body = req.body || {}
  const genre = body.genre || 'Fantasy'
  const length = body.length || 'short'
  const title = `AI ${genre} Story`
  const content = `<h2>${title}</h2><p>This is a ${length} ${genre.toLowerCase()} story generated by the AI service.</p>`
  const excerpt = content.replace(/<[^>]+>/g, '').slice(0, 200) + '...'
  return {
    id: `story_${Date.now()}`,
    title,
    content,
    excerpt,
    author: 'AI Service',
    genre,
    length,
    readTime: length === 'long' ? 15 : length === 'medium' ? 8 : 3,
    tags: [genre.toLowerCase(), length],
    createdAt: new Date().toISOString(),
  }
})

app.post('/api/auth/signup', async (req: any, reply) => {
  const { email, password, name } = req.body || {}
  if (!email || !password) return reply.code(400).send({ error: 'Missing credentials' })

  const existing = await prisma.user.findUnique({ where: { email } })
  if (existing) return reply.code(409).send({ error: 'Email exists' })

  const passwordHash = await bcrypt.hash(password, 10)
  const user = await prisma.user.create({ data: { email, name: name || '', passwordHash } })
  const token = jwt.sign({ uid: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' })
  reply.setCookie('sf_token', token, { httpOnly: true, sameSite: 'lax', path: '/', secure: process.env.NODE_ENV === 'production', maxAge: 60 * 60 * 24 * 7 })
  return { user: { id: user.id, email: user.email, name: user.name, premium: user.premium } }
})

app.post('/api/auth/login', async (req: any, reply) => {
  const { email, password } = req.body || {}
  if (!email || !password) return reply.code(400).send({ error: 'Missing credentials' })
  const user = await prisma.user.findUnique({ where: { email } })
  if (!user || !user.passwordHash) return reply.code(401).send({ error: 'Invalid credentials' })
  const ok = await bcrypt.compare(password, user.passwordHash)
  if (!ok) return reply.code(401).send({ error: 'Invalid credentials' })
  const token = jwt.sign({ uid: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' })
  reply.setCookie('sf_token', token, { httpOnly: true, sameSite: 'lax', path: '/', secure: process.env.NODE_ENV === 'production', maxAge: 60 * 60 * 24 * 7 })
  return { user: { id: user.id, email: user.email, name: user.name, premium: user.premium } }
})

app.get('/api/auth/me', async (req: any) => {
  const token = req.cookies?.sf_token
  if (!token) return { user: null }
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any
    return { user: { id: payload.uid, email: payload.email } }
  } catch {
    return { user: null }
  }
})

const port = Number(process.env.PORT || 4000)
app.listen({ port, host: '0.0.0.0' })
  .then(() => console.log(`API listening on :${port}`))
  .catch((e) => { app.log.error(e); process.exit(1) })


